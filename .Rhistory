# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(mice)
library(glmnet)
library(class)
library(MASS)
library(factoextra)
library(mice)
library(VIM)
library(caret)
library(pROC)
library(Hmisc)
library(corrplot)
library(GGally)
fhs_data <- read.csv('fhs_data.csv')
setwd("C:/Users/danie/Desktop/CICOM/FHS_medi")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(mice)
library(glmnet)
library(class)
library(MASS)
library(factoextra)
library(mice)
library(VIM)
library(caret)
library(pROC)
library(Hmisc)
library(corrplot)
library(GGally)
fhs_data <- read.csv('fhs_data.csv')
# Chunk 3
colnames(fhs_data)
## counting the number of subjects
rand_ids <- plyr::count(fhs_data$RANDID)
rand_ids$subject_number <- 1:nrow(rand_ids)
## Plotting it
# plot(rand_ids$subject_number, rand_ids$freq)
## showing how many subjects have more than 1 observation
(tbl_counts <- table(rand_ids$freq)) # 3206 subjects have 3 observations
(tbl_counts_prop <- tbl_counts / sum(tbl_counts)) # 72.3% have 3 observations
## counting the number of subjects we have in the dataset
length(unique(fhs_data$RANDID)) # 4434 subjects total
## reordering the dataset
fhs_data <- fhs_data[order(fhs_data$RANDID),]
# View(head(fhs_data[fhs_data$DEATH==1,]))
# Chunk 4
fhs_most_recent <- fhs_data %>%
group_by(RANDID) %>%
filter(PERIOD == max(PERIOD)) %>%
ungroup()
nrow(fhs_most_recent)
fhs_most_recent <- fhs_most_recent[,c('RANDID','AGE','SEX','SYSBP','DIABP','TOTCHOL','HDLC','LDLC','GLUCOSE','CURSMOKE','CIGPDAY','HEARTRTE', 'educ', 'PREVCHD', 'PREVAP', 'PREVMI','PREVSTRK', 'PREVHYP', 'ANGINA', 'HOSPMI', 'MI_FCHD', 'STROKE', 'CVD', 'ANYCHD', 'HYPERTEN', 'BMI','DIABETES','BPMEDS','DEATH')]
# transforming binary variables into factors
fhs_most_recent <- fhs_most_recent %>%
mutate(across(
where(~ n_distinct(.) == 2),
as.factor
))
# Chunk 5
NA_tally <- unlist(lapply(fhs_most_recent, function(x){sum(is.na(x))/length(x)}))
NA_df <- data.frame(v_name = names(NA_tally),
missing_proportion = unname(NA_tally))
# View(NA_df)
# filter by variables that have 5% missing or less
v_names_use <- names(NA_tally)[NA_tally < 0.05]
v_names_use <- v_names_use[-1]
# Chunk 6
fhs_most_recent_red <- fhs_most_recent[,(colnames(fhs_most_recent) %in% v_names_use)]
fhs_imp <- mice(fhs_most_recent_red,m=5,maxit=50,meth='rf',seed=500)
fhs_imp1 <- complete(fhs_imp, 1)
anyNA(fhs_imp1) # no missing
output_confmat <- function(model, dataset){
# outputting the confusion matrix for the best tuned model
probs_ <- predict(model, newdata = dataset, type = 'response')
# ROC objects
roc_ <- roc(dataset$DEATH, probs_)
# hyperparameter tuning
threshold_coords_ <- coords(roc_shap_, "best", best.method = "closest.topleft")
# collecting metrics and thresholds
best_threshold_ <- threshold_coords_$threshold
predicted_classes_ <- ifelse(probs_ >= best_threshold_, 1, 0)
confusionMatrix(factor(predicted_classes_), factor(dataset$DEATH))
}
high_shap5_lr <- glm(DEATH ~ HYPERTEN + MI_FCHD + AGE + SYSBP + PREVHYP, family = 'binomial', data = train)
output_confmat(high_shap5_lr, test)
prop.table(table(fhs_imp1$DEATH))
library(splitTools)
set.seed(123)
inds <- partition(fhs_imp1$DEATH, p = c(train = 0.80, test = 0.20)) # 80% train-test split
train <- fhs_imp1[inds$train, ]
test <- fhs_imp1[inds$test, ]
# exporting a labeled dataset for use in python
fhs_imp1_export <- fhs_imp1
fhs_imp1_export$label <- NA
fhs_imp1_export$label[inds$train] <- 'train'
fhs_imp1_export$label[inds$test] <- 'test'
write.csv(fhs_imp1_export, 'fhs_imp1_pyth.csv', row.names = FALSE)
high_shap5_lr <- glm(DEATH ~ HYPERTEN + MI_FCHD + AGE + SYSBP + PREVHYP, family = 'binomial', data = train)
summary(high_shap5_lr)
output_confmat(high_shap5_lr, test)
output_confmat <- function(model, dataset){
# outputting the confusion matrix for the best tuned model
probs_ <- predict(model, newdata = dataset, type = 'response')
# ROC objects
roc_ <- roc(dataset$DEATH, probs_)
# hyperparameter tuning
threshold_coords_ <- coords(roc_, "best", best.method = "closest.topleft")
# collecting metrics and thresholds
best_threshold_ <- threshold_coords_$threshold
predicted_classes_ <- ifelse(probs_ >= best_threshold_, 1, 0)
confusionMatrix(factor(predicted_classes_), factor(dataset$DEATH))
}
high_shap5_lr <- glm(DEATH ~ HYPERTEN + MI_FCHD + AGE + SYSBP + PREVHYP, family = 'binomial', data = train)
summary(high_shap5_lr)
output_confmat(high_shap5_lr, test)
high_shap_lr <- glm(DEATH ~ HYPERTEN + MI_FCHD + AGE + SYSBP + PREVHYP + SEX + educ  + CURSMOKE + ANGINA + CVD, family = 'binomial', data = train)
summary(high_shap_lr)
output_confmat(high_shap_lr, test)
